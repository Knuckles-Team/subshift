name: Build|Upload|Release Python Package

on:
  push:
    branches:
      - 'main'

jobs:
  publish:
    runs-on: self-hosted
    permissions: write-all    
    steps:    
    - name: Checkout Repository
      uses: actions/checkout@v2.3.4
      
    - name: Verify Latest Build Version
      id: verify_version
      run: |
         TAG=$(git tag | tail -n1)
         REPO_NAME=${{ github.event.repository.name }}
         CURRENT_RELEASE=$(git tag | tail -n1 | sed 's/v//')     
         CURRENT_VERSION=$(cat ${REPO_NAME}/version.py | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')
         echo "TAG: $TAG"
         echo "CURRENT RELEASE: $CURRENT_RELEASE"
         echo "CURRENT VERSION: $CURRENT_VERSION"
         echo -e "TAG=$TAG\nCURRENT_RELEASE=$CURRENT_RELEASE\nCURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
         
    - name: Increment Version
      if: ${{ env.CURRENT_RELEASE == env.CURRENT_VERSION }}
      id: increment_version
      run: |
         a=( ${CURRENT_VERSION//./ } ) 
         if [[ ${{ github.event.head_commit.message }} == *"patch"* ]]; then
           ((a[2]++))
         elif [[ ${{ github.event.head_commit.message }} == *"minor"* ]]; then
           ((a[1]++))
         elif [[ ${{ github.event.head_commit.message }} == *"major"* ]]; then
           ((a[0]++))
         else
           ((a[2]++))
         fi         
         CURRENT_VERSION="${a[0]}.${a[1]}.${a[2]}"
         echo -e "Old Version: $CURRENT_RELEASE\nNew Version: $CURRENT_VERSION"
         sed -i 's/CURRENT_VERSION=.*$/CURRENT_VERSION=$CURRENT_VERSION/' $GITHUB_ENV
         
    - name: Build package
      #if: $CURRENT_RELEASE != $CURRENT_VERSION
      id: build_package
      run: |
        README=$(cat README.md)        
        echo "Installing dependencies"
        python -m pip install -r requirements.txt
        echo "Building package"
        python setup.py bdist_wheel --universal
        BUILD_VERSION=$(ls dist | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')
        echo "BUILD VERSION: $BUILD_VERSION"
        echo "README: $README"
        echo -e "BUILD_VERSION=$BUILD_VERSION\nREADME='$README'" >> $GITHUB_ENV
        
    - name: Upload Artifact
      #if: $CURRENT_RELEASE != $CURRENT_VERSION
      id: upload_artifact
      uses: actions/upload-artifact@v3      
      with:
        name: ${{ github.event.repository.name }}-${{ env.VERSION }}
        path: dist/${{ github.event.repository.name }}*.whl
        
    - name: Create Release
      #if: $CURRENT_RELEASE != $CURRENT_VERSION
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.BUILD_VERSION }}
        release_name: Release v${{ env.BUILD_VERSION }}
        body: |
          Changes in this Release - ${{ github.ref }}
          ${{ env.README }}
        draft: false
        prerelease: false
        
    - name: Publish package
      #if: $CURRENT_RELEASE != $CURRENT_VERSION
      run: |
        twine upload dist/* --verbose -u "__token__" -p "${{ secrets.PYPI_API_TOKEN }}"
